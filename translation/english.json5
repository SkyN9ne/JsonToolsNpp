// If you want to translate JsonTools into another language, follow these steps (in the example below, we are translating into the "fooish" language):
// 1. Create a copy of this file at the path "translation/fooish.json5" relative to the JsonTools plugin directory (the directory where the JsonTools.dll binary is installed, *not* the plugin config directory).
// 2. Edit the values associated with the various keys in this document.
//     DO NOT CHANGE THE KEYS OF ANY OBJECT, OR ADD OR REMOVE KEYS! ONLY CHANGE THE VALUES.
// 3. Close Notepad++ and reopen it, then look at the various JsonTools forms and menu items to see if the translation is satisfactory.
{
    "forms": {
        "AboutForm": {
            // this is the name that appears in the title bar for this form
            "title": "About JsonTools",
            // Each key in this object is the name of the control in the JsonTools codebase.
            //     If a control name is missing, that control is not translated.
            "controls": {
                // If the value associated with a control name is a string,
                //     that controls the text of the control.
                "Description": "Query/editing tool for JSON including linting, reformatting, \r\na tree viewer with file navigation,\r\na JMESpath-like query language, and much more",
                "GitHubLink": {
                    // This is a LinkLabel, meaning it has a clickable link (the JsonTools repo URL).
                    "text": "[{\"need\": \"help?\"}, \"ask me at\",\r\n\"https://github.com/molsonkiko/JsonToolsNppPlugin\"]",
                    // If you change the text of this LinkLabel,
                    //      make sure that you change the linkStart property
                    //      so that only the URL is in the highlighted region.
                    "linkStart": 34,
                    "linkLength": 50
                },
                "DebugInfoLabel": "Notepad++ version: X.Y.Z. For more info about your\r\ninstallation, go to ? -> Debug Info on the main status bar.",
                "ThanksWowLinkLabel": {
                    "text": "Special thanks to:\r\n* Don Ho for making Notepad++\r\n* kbilsted for making the plugin pack this is based on\r\n* And of course everyone who helped make this plugin\r\n   better!\r\n* The amazing community makes this work worthwhile.\r\n  Wow!",
                    "linkStart": 228,
                    "linkLength": 4
                }
            }
        },
        "ErrorForm": {
            // This form has no translatable controls, so only the title is here.
            "title": "Syntax errors in JSON"
        },
        "FindReplaceForm": {
            "title": "Find/replace in JSON",
            "controls": {
                "FindReplaceFormTitle": "Find/replace in JSON",
                "FindTextBoxLabel": "Find...",
                "SwapFindReplaceButton": "Swap",
                "ReplaceTextBoxLabel": "Replace with...",
                "RootTextBoxLabel": "Root",
                // This control is a checkbox with text that changes
                //     depending on whether it is checked or unchecked.
                "ShowAdvancedOptionsCheckBox": {
                    // Change this value to set the text when the box is *checked*
                    "checked": "Show advanced options",
                    // Change this value to set the text when the box is *unchecked*
                    "unchecked": "Hide advanced options"
                },
                // This is a ListBox, where the text can be selected from a drop-down list.
                // DO NOT CHANGE THE NUMBER OF ELEMENTS IN THIS ARRAY!
                "KeysValsBothBox": [
                    "Keys",
                    "Values",
                    "Keys and values"
                ],
                "KeysValsBothBoxLabel": "Search in keys or values?",
                "RegexBox": "Use regular expressions?",
                "MathBox": "Math expression",
                "RecursiveSearchBox": "Recursive search?",
                "IgnoreCaseCheckBox": "Ignore case?",
                "MatchExactlyBox": "Match exactly?",
                "FindButton": "Find all",
                "ReplaceButton": "Replace all"
            }
        },
        "GrepperForm": {
            "title": "JSON from files and APIs",
            "controls": {
                "GrepperFormTitle": "JSON from files and APIs",
                "GetJsonFromApisTitle": "Get JSON from APIs",
                "UrlsBoxLabel": "Enter URLs of APIs you want to request JSON from (one per line or as JSON array)",
                "SendRequestsButton": "Send API requests",
                "GetJsonFromFilesTitle": "Get JSON from local files",
                "RecursiveSearchCheckBox": "Search in subdirectories?",
                "ChooseDirectoriesButton": "Choose directory...",
                // This is another ListBox. There may be more than one element in this list,
                //    but only the first element can be translated in this case.
                "DirectoriesVisitedBox": [
                    "Previously visited directories..."
                ],
                "SearchDirectoriesButton": "Search directories",
                "DocsButton": "Documentation",
                "ViewErrorsButton": "View errors",
                "ViewResultsButton": "View results in buffer",
                "ChooseFilesTitle": "Choose files and URLs",
                "RemoveSelectedFilesButton": "Remove selected files"
            }
        },
        "JsonToCsvForm": {
            "title": "JSON to CSV",
            "controls": {
                "JsonToCsvFormTitle": "Create CSV from JSON",
                "KeySepBoxLabel": "Key Separator",
                "DelimBoxLabel": "Delimiter in output file",
                "eolComboBoxLabel": "Line terminator in output box",
                "BoolsToIntsCheckBox": "Convert true/false to 1/0?",
                "StrategyBox": [
                    "Default",
                    "Full recursive",
                    "No recursion",
                    "Stringify iterables"
                ],
                "StrategyBoxLabel": "Strategy",
                "GenerateCSVButton": "Generate CSV",
                "DocsButton": "Docs"
            }
        },
        "RegexSearchForm": {
            "title": "Regex search to JSON",
            "controls": {
                "Title": "Regex Search to JSON",
                "RegexTextBoxLabel": "Enter a regex",
                "IgnoreCaseCheckBox": "Ignore case?",
                "IncludeFullMatchAsFirstItemCheckBox": "Include full match as first item?",
                "ParseAsCsvCheckBox": "Parse as CSV?",
                "DelimiterTextBoxLabel": "Delimiter",
                "QuoteCharTextBoxLabel": "Quote character",
                "NewlineComboBoxLabel": "Newline",
                "NColumnsTextBoxLabel": "Number of columns",
                "HeaderHandlingComboBox": [
                    "Skip header",
                    "Include header",
                    "Use header as keys"
                ],
                "HeaderHandlingComboBoxLabel": "Header handling",
                "ColumnsToParseAsNumberTextBoxLabel": "Groups to parse as number (int array)",
                "SearchButton": "Search"
            }
        },
        "SortForm": {
            "title": "Sort JSON arrays",
            "controls": {
                "SortFormTitle": "Sort JSON array(s)",
                "PathTextBoxLabel": "Path to array(s)",
                "IsMultipleArraysCheckBox": "Path goes to multiple arrays; sort each subarray",
                "ReverseOrderCheckBox": "Biggest to smallest?",
                "SortMethodBox": [
                    "Default",
                    "As strings (ignoring case)",
                    "By index/key of each child",
                    "By query on each child",
                    "Shuffle"
                ],
                "SortMethodBoxLabel": "Sort method",
                "QueryKeyIndexTextBoxLabel": "Key/index/query",
                "SortButton": "Sort"
            }
        },
        "TreeViewer": {
            // the title of this form is programmatically generated
            // so we can't translate it.
            "controls": {
                "SubmitQueryButton": "Submit query",
                "QueryToCsvButton": "Query to CSV",
                "SaveQueryButton": "Save query result",
                "RefreshButton": "Refresh",
                "FindReplaceButton": "Find/replace"
            }
        }
    },
    // this controls the text of the main menu items
    //      associated with the JsonTools item on the Notepad++ plugin menu.
    "menuItems": {
        // The "&D" in this text means that this menu item can be accessed by the "D"
        //    accelerator key, meaning that the Alt-P-J-D key sequence can access this menu item.
        // When translating menu items, it is good practice to include an accelerator key,
        //     and it is *even better* if the accelerator key is the same as in the English translation.
        // Thus, the Italian translation might be "&Documentazione".
        //
        // *VERY VERY IMPORTANT*: Every menu item name MUST have 63 characters or fewer when encoded in UTF-16.
        //     The easiest way to check if any menu items are too long is to open the JsonTools treeview for this file,
        //     and submit the query on the next line in the text box in the top-left corner:
        //     @.menuItems[s_len(@) >= 64]
        //     The query on the line above will select all menu items with 64 or more UTF-16 characters.
        //
        //     You *cannot* check the length by selecting it with Notepad++, because Notepad++ shows UTF-8 byte counts in the status bar.
        "&Documentation": "&Documentation",
        "&Pretty-print current JSON file": "&Pretty-print current JSON file",
        "&Compress current JSON file": "&Compress current JSON file",
        "Path to current &position": "Path to current &position",
        "Select every val&id JSON in selection": "Select every val&id JSON in selection",
        "Chec&k JSON syntax now": "Chec&k JSON syntax now",
        "Open &JSON tree viewer": "Open &JSON tree viewer",
        "&Get JSON from files and APIs": "&Get JSON from files and APIs",
        "Sort arra&ys": "Sort arra&ys",
        "&Settings": "&Settings",
        "&Validate JSON against JSON schema": "&Validate JSON against JSON schema",
        "Choose schemas to automatically validate &filename patterns": "Choose schemas to automatically validate &filename patterns",
        "Generate sc&hema from JSON": "Generate sc&hema from JSON",
        "Generate &random JSON from schema": "Generate &random JSON from schema",
        "Run &tests": "Run &tests",
        "A&bout": "A&bout",
        "See most recent syntax &errors in this file": "See most recent syntax &errors in this file",
        "JSON to YAML": "JSON to YAML",
        "Parse JSON Li&nes document": "Parse JSON Li&nes document",
        "&Array to JSON Lines": "&Array to JSON Lines",
        "D&ump selected text as JSON string(s)": "D&ump selected text as JSON string(s)",
        "Dump JSON string(s) as ra&w text": "Dump JSON string(s) as ra&w text",
        "Open tree for &INI file": "Open tree for &INI file",
        "Rege&x search to JSON": "Rege&x search to JSON"
    },
    // The JsonTools.ini config file (in your plugin config folder)
    //     will have these translated descriptions as comments above each setting.
    // TODO: When a user opens the settings form and clicks on a setting, the translation should also appear.
    "settingsDescriptions": {
        "logger_level": "Suppress logging of errors at or below this level.\r\nSTRICT: Log all deviations from the original JSON spec.\r\nOK: The original JSON spec plus the following:\r\n    * strings can contain characters with ASCII values less than 0x20 (includes '\\t')\r\nNAN_INF: Do not log errors when NaN, Infinity, and -Infinity are parsed.\r\nJSONC: The following errors are not logged:\r\n    * JavaScript single-line '//' and multi-line '/*...*/' comments\r\n    * NaN and +/-Infinity\r\nJSON5: Everything in the JSONC and NAN_INF levels is not logged, as well as the following:\r\n    * singlequoted strings\r\n    * commas after the last element of an array or object\r\n    * unquoted object keys\r\n    * see https://json5.org/ for more.",
        "offer_to_show_lint": "When the document is parsed, show a prompt to see syntax errors in the document.",
        "auto_validate": "Automatically validate .json, .jsonc, and .jsonl files every 2 seconds, except very large files",
        "inactivity_seconds_before_parse": "How many seconds of user inactivity before the plugin re-parses the document. Minimum 1.",
        "max_file_size_MB_slow_actions": "Files larger than this number of megabytes have the following slow actions DISABLED by default:\r\n* Automatically turning on the JSON lexer.\r\n* Automatic parsing of the file on opening and approximately 2 seconds after every edit.",
        "max_json_length_full_tree": "The longest length of a JSON array or object that gets all its children added to the tree view. Longer iterables get only some of their children added to the tree.",
        "tree_node_images": "Should each node in the tree have an image associated with its type?",
        "ask_before_pretty_printing_json_lines": "Ask before pretty-printing JSON Lines documents, ignore requests to pretty-print, or pretty-print without asking?",
        "indent_pretty_print": "The number of spaces between levels of JSON when pretty-printing",
        "minimal_whitespace_compression": "If true, using the 'Compress JSON' plugin command will remove ALL unnecessary whitespace from the JSON. Otherwise, it will leave after the colon in objects and after the comma in both objects and arrays",
        "remember_comments": "When JSON is pretty-printed or compressed, any comments found when it was last parsed are included.\r\nWhen pretty-printing, each comment will have the same relative location to each JSON element as when it was parsed.\r\nWhen compressing, all comments will come at the beginning of the document.",
        "sort_keys": "Use one horizontal tab ('\\t') instead of spaces between levels of JSON when pretty-printing",
        "auto_try_guess_csv_delim_newline": "If this setting is true,\r\nwhen the regex search form is opened, or when the \"Parse as CSV?\" checkbox in that form is toggled on,\r\nJsonTools will attempt to guess whether the current document is a CSV or TSV file, and how many columns and what newline it has.\r\nThe regex search form will take slightly longer to open if this is true.",
        "csv_newline": "Which type of newline to use for generated CSV files.",
        "key_style": "The style of key to use when getting the path or key/index of a node or line",
        "skip_api_request_and_fuzz_tests": "When running tests, skip the tests that send requests to APIs and the RemesPath fuzz tests",
        "try_parse_start_chars": "When selecting every JSON in the file, start trying to parse only at these characters.\r\nOnly JSON valid according to the NAN_INF logger_level is tolerated.\r\nExample: if \"[{ are chosen (default), we consider only potential strings, arrays, and objects.\r\nIf \"[{tf are chosen, we consider potential strings, arrays, objects, and booleans.",
        "tree_view_font_size": "The font size (in points) for the tree viewer. For reference, the default value is 7.8.",
        "use_npp_styling": "Use the same colors as the editor window for the tree viewer and other JsonTools forms?",
        "extended_ascii_strings": "Use extended ASCII characters (e.g., \u000b, ñ) in strings?",
        "maxArrayLength": "Maximum length of random arrays, unless otherwise specified by the \"maxItems\" keyword",
        "minArrayLength": "Minimum length of random arrays, unless otherwise specified by the \"minItems\" keyword",
        "max_schema_validation_problems": "Maximum number of JSON Schema validation problems to log before the validator stops"
    }
}